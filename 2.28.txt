1.实现一个函数,可以左旋字符串中的k个字符。 ABCD左旋一个字符得到BCDA ABCD左旋

#define _CRT_SECURE_NO_WARNINGS

 

#include <stdio.h>

#include <string.h>

#include <stdlib.h>

//len可不由参数传递，可在Left函数内求得

//void Left(char c[], int len, int k)//方法1

//{

//      k = k%len;//对于5个字符的字符串，左旋3次和左旋8次结果一样

//	int j = 0;

//	for (j=0; j<k; j++)

//	{

//		int i = 0;

//		char tmp = c[0];

//		for (i=0; i<len-1; i++)

//		{

//			c[i] = c[i+1];

//		}

//		c[i] = tmp;

//	}

//}

 

 

//void Reverse(char *start, char *end)

//{

//	while (start<end)

//	{

//		*start ^= *end;

//		*end ^= *start;

//		*start ^= *end;

//		start++;

//		end--;

//	}

//}

//

//void Left(char c[], int len , int k)

//{

//	k = k%len;

//	Reverse(c, c+k-1);

//	Reverse(c+k, c+len-1);

//	Reverse(c, c+len-1);

//}

 

 

void Left(char c[], int len , int k)

{

	k = k%len;

	char *p = (char *)malloc((2*len+1)*sizeof(char));

	strcpy(p, c);

	strcat(p, c);

	strncpy(c, p+k, len);

	free(p);

}

 

int main()

{

	char c[] = "ABCDE";

	int k = 2;

	int len = strlen(c);

	printf("左旋前：%s\n", c);

    Left(c,len,k);

	printf("左旋后：%s\n", c);
                 system("pause");
	return 0;

}



2.判断一个字符串是否为另外一个字符串旋转之后的字符串。 
void left_rotate_k_ch(char str[], int k)
{
    int i = 0;
    int len = strlen(str);
    for (i = 0; i < k; i++)
    {
        char temp = str[0];
        int j = 0;
        for (j = 0; j < len-1; j++)
        {
            str[j] = str[j + 1];
        }
        str[len - 1] = temp;
    }
}

