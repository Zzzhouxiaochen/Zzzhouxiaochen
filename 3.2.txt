1.一个数组中只有两个数字是出现一次， 
其他所有数字都出现了两次。 
找出这两个数字，编程实现。 

void find(int arr[], int n,int *sum1,int *sum2)
{
	int sum = arr[0];      //全部的数相异或的值
	int j = 0;                  //第一个只出现一次的数
	int sum0 = 0;
	for (int i = 1; i < n; i++)
	{
		sum = sum^arr[i];  //两个只出现一次的数的异或结果
		sum0 = sum;
	}
	for (j = 0; j < 32; j++)     //求这两个数的第一次出现不同是第几位
	{
		if (sum & 1 == 0)                   
			sum >>= 1;
		else if (sum & 1 == 1)
			break;
	}
	for (int s = 0; s < n; s++)
	{
		int tmp = 0;
			tmp=arr[s] >> j;
		if (tmp & 1 == 1)         //            1, 5, 6, 9, 2, 6, 5, 9, 1, 7
		{
			int x = 0;
			if (x == 0)
			{
				*sum1 = arr[s];
			}
			else
			{
				*sum1 = arr[s] ^ *sum1;      //sum1=0;   sum1=7;   sum2=2;
			}
			++x;
		}

	}
	  // 第二个只出现一个的数
	*sum2 = sum0^*sum1;
}

int main()
{
	int arr[10] = { 1, 5, 6, 9, 2, 6, 5, 9, 1, 7 };//2,7
	int num1, num2;
	find(arr, 10,&num1,&num2);
	printf("%d %d", num1, num2);
	system("pause");
	return 0;
}


2.喝汽水，1瓶汽水1元，2个空瓶可以换一瓶汽水， 
给20元，可以多少汽水。 
编程实现。 

#include <stdio.h>
#include <stdlib.h>

int num (int n)
{
	if (n != 0)//零元返回零瓶
	{
		if (n != 1)//一元返回一瓶
		{
			if (n%2 == 0)//偶数
			{
				return n + num(n/2);//偶数直接返回第n行的个数加第n-1行的个数

;
			}
			else//奇数
			{
				return (n - 1) + num((n/2) + 1);//奇数时吧第n行余下的一个挪到第n-1行，按n-1行的进行计算
			}
		}
		else
		{
			return 1;
		}
	}
	else
	{
		return 0;
	}
}

int main()
{
	int n = 0;
	printf ("请输入钱数：\n");
	scanf ("%d", &n);
	printf ("%d元可以喝%d瓶汽水！！\n", n, 2*n-1);//方法一：找规律，规律刚好是n元钱能喝2*n-1瓶水；
	printf ("%d元可以喝%d瓶汽水！！\n", n, num(n));//方法二：用递归的方法计算；
	system ("pause");
	return 0;
}

3.模拟实现strcpy

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

char* my_strcpy(char* dest, const char* str)
{
	const char* ret = str;
	assert (str);
	while (*dest++ = *str++)
	{
		;
	}
	*dest = *str;//最后把‘\0’赋给*dest
}

int main ()
{
	char arr1[] = "abcde";
	char arr2[10] = {'0'};

	my_strcpy (arr2, arr1);
	printf ("%s\n", arr2);

	system ("pause");
	return 0;
}

4.模拟实现strcat
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

char* my_strcat (char* dest, const char* str)
{
	const char* ret = str;
	assert (str);
	while (*dest)//dest 指向'\0'
	{
		dest++;
	}
	while (*dest++ = *str++)//给dest从\0开始赋值，到str的\0时循环结束
	{
		;
	}
	*dest = *str;//*dest = '\0';
	return (char *)ret;
}
int main()
{
	char arr1[] = "fdaifnd";
	char arr2[10] = "bc";
	my_strcat (arr2, arr1);
	printf ("%s\n", arr2);
	system ("pause");
	return 0;
}
