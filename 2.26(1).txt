1.调整数组使奇数全部都位于偶数前面。 

题目： 

输入一个整数数组，实现一个函数， 
来调整该数组中数字的顺序使得数组中所有的奇数位于数组的前半部分， 
所有偶数位于数组的后半部分。



#include<stdio.h> 
#include<stdlib.h>
int swap_num(int *arr, int len)

{

	int i = 0;

	for (; i < len; i++)

	{

		if (0 != arr[i] % 2){

			printf("%d ",arr[i]);

		}

	}

	for (i = 0; i < len; i++)

	{

		if (0 == arr[i] % 2){

			printf("%d ",arr[i]);

		}

	}

}

int main()

{

	int arr[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

	int len = sizeof(arr) / sizeof(arr[0]);

	swap_num(arr, len);

	system("pause");

	return 0;

}


2. 
//杨氏矩阵 
有一个二维数组. 
数组的每行从左到右是递增的，每列从上到下是递增的. 
在这样的数组中查找一个数字是否存在。 
时间复杂度小于O(N); 


#include<stdio.h>
#include<stdlib.h>
bool Reseach_sou(int arr[][3], int row,int col, int key)

{

	int i = 0;

	int j = col-1;

        //从第一行,最后一列开始寻找

	while ((j >= 0) && (i <= 2))

	{

		if (arr[i][j] == key)

			return true;

		else if (arr[i][j] < key)

			i++;

		else

			j--;

	}

	return false;

}

int main()

{

	int arr[][3] = {1, 2 ,3, 2, 3, 4, 3, 4, 5};

	int key = 0;

	int row = 3;

	int col = 3;

	scanf("%d",&key);

	Reseach_sou(arr, row, col, key);

        //如果找到返回true,找不到返回false

        if(Reseach_sou(arr, row, col, key))

            return printf("找到了!\n");

	else

            printf("没找到!\n");	
           system("pause");
        return 0;

}
